{"version":3,"sources":["components/Card.jsx","pages/Landing.jsx","App.jsx","index.js"],"names":["Card","props","style","current_card","card","color","className","Landing","generate_cards","cards","suit","values","i","length","j","push","shuffle_deck","card_pool","temp","rand","currentIndex","Math","floor","random","setState","deck","state","result","rank","name","function","hand","royal_flush","straight_flush","four","three","two","flush","straight","this","sort_hand","cards_unsorted","C","D","H","S","sort","a","b","filter","indexOf","checkStraight","check_straight_flush","find_highest","card_div","map","key","onClick","card_number","draw_cards","Component","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ede86226.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './Card.css';\r\n\r\nconst Card = props => {\r\n\tlet style;\r\n\r\n\tlet current_card = [...props.card];\r\n\tswitch (current_card[1]) {\r\n\t\tcase 'C':\r\n            style = {color: 'black'};\r\n            current_card[1] = <span>&clubs;</span>;\r\n\t\t\tbreak;\r\n\t\tcase 'D':\r\n            style = {color: 'red'};\r\n            current_card[1] = <span>&diams;</span>;\r\n\t\t\tbreak;\r\n\t\tcase 'H':\r\n            style = {color: 'red'};\r\n            current_card[1] = <span>&hearts;</span>;\r\n\t\t\tbreak;\r\n\t\tcase 'S':\r\n            style = {color: 'black'};\r\n            current_card[1] = <span>&spades;</span>;\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\tbreak;\r\n\t}\r\n\r\n\tswitch (current_card[0]) {\r\n\t\tcase 11:\r\n            current_card[0] = 'J';\r\n\t\t\tbreak;\r\n\t\tcase 12:\r\n            current_card[0] = 'Q';\r\n\t\t\tbreak;\r\n\t\tcase 13:\r\n            current_card[0] = 'K';\r\n\t\t\tbreak;\r\n\t\tcase 14:\r\n            current_card[0] = 'A';\r\n\t\t\tbreak;\r\n\r\n\t\tdefault:\r\n\t\t\tbreak;\r\n\t}\r\n\t\r\n\treturn (\r\n\t\t<div className=\"card\" style={style}>\r\n\t\t\t<div className=\"top_left\">{current_card[0]}{current_card[1]}</div>\r\n\t\t\t<div className=\"bottom_right\">{current_card[0]}{current_card[1]}</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Card;\r\n","// Importing Dependencies\r\nimport React, { Component } from 'react';\r\nimport Card from '../components/Card';\r\n\r\n// Importing Styling\r\nimport './Landing.css';\r\n\r\nclass Landing extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tcard_pool: [],\r\n\t\t\tdeck: [],\r\n\t\t\tresult: '',\r\n\t\t\trank: [\r\n\t\t\t\t{\r\n\t\t\t\t\t// 10 J Q K A all in the same suit\r\n\t\t\t\t\tname: 'Royal Flush',\r\n\t\t\t\t\tfunction: function(hand) {\r\n\t\t\t\t\t\tif (hand.royal_flush) {\r\n\t\t\t\t\t\t\treturn 'Royal Flush'\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t// Five cards in a row, all in the same suit\r\n\t\t\t\t\tname: 'Straight Flush',\r\n\t\t\t\t\tfunction: function(hand) {\r\n\t\t\t\t\t\tif (hand.straight_flush) {\r\n\t\t\t\t\t\t\treturn 'Straight Flush';\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t// The same card in each of the four suits\r\n\t\t\t\t\tname: 'Four of a Kind',\r\n\t\t\t\t\tfunction: function(hand) {\r\n\t\t\t\t\t\tif (hand.four > 0) {\r\n\t\t\t\t\t\t\treturn 'Four of a Kind';\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t// A pair plus three of a kind\r\n\t\t\t\t\tname: 'Full House',\r\n\t\t\t\t\tfunction: function(hand) {\r\n\t\t\t\t\t\tif (hand.three > 0 && hand.two > 0) {\r\n\t\t\t\t\t\t\treturn 'Full House';\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t// Five cards in one suit but not in numerical order\r\n\t\t\t\t\tname: 'Flush',\r\n\t\t\t\t\tfunction: function(hand) {\r\n\t\t\t\t\t\tif (hand.flush) {\r\n\t\t\t\t\t\t\treturn 'Flush';\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t// Five cards in numberical order, but not in the same suit\r\n\t\t\t\t\tname: 'Straight',\r\n\t\t\t\t\tfunction: function(hand) {\r\n\t\t\t\t\t\tif (hand.straight) {\r\n\t\t\t\t\t\t\treturn 'Straight';\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t// Three of one card and two non-paired cards\r\n\t\t\t\t\tname: 'Three of a Kind',\r\n\t\t\t\t\tfunction: function(hand) {\r\n\t\t\t\t\t\tif (hand.three > 0) {\r\n\t\t\t\t\t\t\treturn 'Three of a Kind';\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t// Two pairs\r\n\t\t\t\t\tname: 'Two Pair',\r\n\t\t\t\t\tfunction: function(hand) {\r\n\t\t\t\t\t\tif (hand.two > 1) {\r\n\t\t\t\t\t\t\treturn 'Two Pair';\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t// One Pair\r\n\t\t\t\t\tname: 'One Pair',\r\n\t\t\t\t\tfunction: function(hand) {\r\n\t\t\t\t\t\tif (hand.two > 0) {\r\n\t\t\t\t\t\t\treturn 'One Pair';\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t// No matching cards\r\n\t\t\t\t\tname: 'High Card',\r\n\t\t\t\t\tfunction: function(hand) {\r\n\t\t\t\t\t\treturn 'High Card';\r\n\t\t\t\t\t},\r\n\t\t\t\t},\r\n\t\t\t],\r\n\t\t};\r\n\t}\r\n\r\n\t// generate 52 cards\r\n\tgenerate_cards = () => {\r\n\t\tlet cards = [];\r\n\t\tlet suit = ['C', 'D', 'H', 'S'];\r\n\t\tlet values = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14];\r\n\t\tfor (let i = 0; i < suit.length; i++) {\r\n\t\t\tfor (let j = 0; j < values.length; j++) {\r\n\t\t\t\tcards.push([values[j], suit[i]]);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn cards;\r\n\t};\r\n\r\n\t// shuffle the deck and add it to state\r\n\tshuffle_deck = card_pool => {\r\n\t\tlet currentIndex = card_pool.length;\r\n\t\tlet temp;\r\n\t\tlet rand;\r\n\r\n\t\twhile (0 !== currentIndex) {\r\n\t\t\trand = Math.floor(Math.random() * currentIndex);\r\n\t\t\tcurrentIndex -= 1;\r\n\r\n\t\t\ttemp = card_pool[currentIndex];\r\n\t\t\tcard_pool[currentIndex] = card_pool[rand];\r\n\t\t\tcard_pool[rand] = temp;\r\n\t\t}\r\n\r\n\t\tthis.setState({\r\n\t\t\tdeck: card_pool,\r\n\t\t});\r\n\t};\r\n\r\n\t// on component mount generate cards then randomize\r\n\tcomponentDidMount() {\r\n\t\tlet cards = this.generate_cards();\r\n\t\tthis.setState(\r\n\t\t\t{\r\n\t\t\t\tcard_pool: cards,\r\n\t\t\t},\r\n\t\t\t() => {\r\n\t\t\t\tthis.shuffle_deck(this.state.card_pool);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\trender() {\r\n\t\t// Draw between 5 and 40 cards\r\n\t\tconst draw_cards = () => {\r\n\t\t\tthis.shuffle_deck(this.state.deck);\r\n\t\t\tlet cards = [];\r\n\t\t\tlet card_number = Math.floor(Math.random() * Math.floor(35) + 5);\r\n\r\n\t\t\tfor (let i = 0; i < card_number; i++) {\r\n\t\t\t\tcards.push(this.state.deck[i]);\r\n            }\r\n            \r\n\t\t\tsort_hand(cards);\r\n\t\t};\r\n\r\n\t\t// Sort cards\r\n\t\tconst sort_hand = cards_unsorted => {\r\n\t\t\tlet hand = {\r\n\t\t\t\tC: 0,\r\n\t\t\t\tD: 0,\r\n\t\t\t\tH: 0,\r\n\t\t\t\tS: 0,\r\n\t\t\t\ttwo: 0,\r\n\t\t\t\tthree: 0,\r\n\t\t\t\tfour: 0,\r\n\t\t\t\tflush: false,\r\n\t\t\t\tstraight: false,\r\n\t\t\t\tstraight_flush: false,\r\n\t\t\t\troyal_flush: false,\r\n\t\t\t\tcards: cards_unsorted,\r\n\t\t\t};\r\n\r\n\t\t\t// method to sort [1,D]\r\n\t\t\tconst compare_cards = (a, b) => {\r\n\t\t\t\tif (a[0] < b[0]) return -1;\r\n\t\t\t\tif (b[0] < a[0]) return 1;\r\n\t\t\t\treturn 0;\r\n\t\t\t};\r\n\r\n\t\t\t// Sort cards\r\n\t\t\thand.cards = cards_unsorted.sort(compare_cards);\r\n\r\n\t\t\t// Determine the number of suits and pairs\r\n\t\t\tfor (let i = 0; i < hand.cards.length; i++) {\r\n\t\t\t\t// Tally number of suits\r\n\t\t\t\tswitch (hand.cards[i][1]) {\r\n\t\t\t\t\tcase 'C':\r\n\t\t\t\t\t\thand.C++;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'D':\r\n\t\t\t\t\t\thand.D++;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'H':\r\n\t\t\t\t\t\thand.H++;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'S':\r\n\t\t\t\t\t\thand.S++;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Checking for Two / Three / Four of a kind\r\n\t\t\t\tif (\r\n\t\t\t\t\ti + 3 < hand.cards.length &&\r\n\t\t\t\t\thand.cards[i][0] === hand.cards[i + 1][0] &&\r\n\t\t\t\t\thand.cards[i][0] === hand.cards[i + 2][0] &&\r\n\t\t\t\t\thand.cards[i][0] === hand.cards[i + 3][0]\r\n\t\t\t\t) {\r\n\t\t\t\t\thand.four++;\r\n\t\t\t\t} else if (\r\n\t\t\t\t\ti + 2 < hand.cards.length &&\r\n\t\t\t\t\thand.cards[i][0] === hand.cards[i + 1][0] &&\r\n\t\t\t\t\thand.cards[i][0] === hand.cards[i + 2][0]\r\n\t\t\t\t) {\r\n\t\t\t\t\thand.three++;\r\n\t\t\t\t} else if (\r\n\t\t\t\t\ti + 1 < hand.cards.length &&\r\n\t\t\t\t\thand.cards[i][0] === hand.cards[i + 1][0]\r\n\t\t\t\t) {\r\n\t\t\t\t\thand.two++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Check for a straight of any kind\r\n\t\t\tconst checkStraight = () => {\r\n\t\t\t\tlet temp = [];\r\n\r\n\t\t\t\tfor (let i = 0; i < hand.cards.length; i++) {\r\n\t\t\t\t\ttemp.push(hand.cards[i][0]);\r\n\t\t\t\t}\r\n\r\n\t\t\t\ttemp = temp.filter((a, b) => temp.indexOf(a) === b);\r\n\r\n\t\t\t\tfor (let j = 0; j < temp.length; j++) {\r\n\t\t\t\t\tif (j + 4 < temp.length) {\r\n\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\ttemp[j] + 1 === temp[j + 1] &&\r\n\t\t\t\t\t\t\ttemp[j] + 2 === temp[j + 2] &&\r\n\t\t\t\t\t\t\ttemp[j] + 3 === temp[j + 3] &&\r\n\t\t\t\t\t\t\ttemp[j] + 4 === temp[j + 4]\r\n\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\thand.straight = true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t\tcheckStraight();\r\n\r\n\t\t\t// Check for a flush of any type\r\n\t\t\tif (hand.C > 4 || hand.D > 4 || hand.H > 4 || hand.S > 4) {\r\n\t\t\t\thand.flush = true;\r\n\t\t\t}\r\n\r\n            // If there is a possibility of a Straight Flush or Royal Flush\r\n\t\t\tif (hand.flush && hand.straight) {\r\n\t\t\t\tconst check_straight_flush = suit => {\r\n\t\t\t\t\tlet temp = [];\r\n\t\t\t\t\tfor (let i = 0; i < hand.cards.length; i++) {\r\n\t\t\t\t\t\tif (hand.cards[i][1] === suit) {\r\n\t\t\t\t\t\t\ttemp.push(hand.cards[i][0]);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tfor (let j = 0; j < temp.length; j++) {\r\n\t\t\t\t\t\tif (j + 4 < temp.length) {\r\n\t\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\t\ttemp[j] + 1 === temp[j + 1] &&\r\n\t\t\t\t\t\t\t\ttemp[j] + 2 === temp[j + 2] &&\r\n\t\t\t\t\t\t\t\ttemp[j] + 3 === temp[j + 3] &&\r\n\t\t\t\t\t\t\t\ttemp[j] + 4 === temp[j + 4]\r\n\t\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\t\thand.straight_flush = true;\r\n\r\n\t\t\t\t\t\t\t\t// Check Royal Flush\r\n\t\t\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\t\t\ttemp[temp.length - 1] === 14 &&\r\n\t\t\t\t\t\t\t\t\ttemp[temp.length - 2] === 13 &&\r\n\t\t\t\t\t\t\t\t\ttemp[temp.length - 3] === 12 &&\r\n\t\t\t\t\t\t\t\t\ttemp[temp.length - 4] === 11 &&\r\n\t\t\t\t\t\t\t\t\ttemp[temp.length - 5] === 10\r\n\t\t\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\t\t\t// we got a royal flush\r\n\t\t\t\t\t\t\t\t\thand.royal_flush = true;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t\tif (hand.C > 4) check_straight_flush('C');\r\n\t\t\t\tif (hand.D > 4) check_straight_flush('D');\r\n\t\t\t\tif (hand.H > 4) check_straight_flush('H');\r\n\t\t\t\tif (hand.S > 4) check_straight_flush('S');\r\n\t\t\t}\r\n\r\n\t\t\t// Pass the sorted hand to find_highest\r\n\t\t\tfind_highest(hand);\r\n\r\n\t\t\t// Map cards to Card component\r\n\t\t\tconst render_hand = card => {\r\n\t\t\t\treturn <Card card={card} key={card[0] + card[1]} />;\r\n\t\t\t};\r\n\r\n\t\t\t// Add card div to the page\r\n\t\t\tlet card_div = hand.cards.map(render_hand);\r\n\r\n\t\t\tthis.setState({\r\n\t\t\t\tcard_div: card_div,\r\n\t\t\t});\r\n\t\t};\r\n\r\n\t\t// Goes top down through the rankings to determine the highest hand\r\n\t\tconst find_highest = hand => {\r\n\t\t\tfor (let i = 0; i < this.state.rank.length; i++) {\r\n\t\t\t\tlet result = this.state.rank[i].function(hand);\r\n\t\t\t\tif (result) {\r\n\t\t\t\t\tthis.setState({\r\n\t\t\t\t\t\tresult: result,\r\n\t\t\t\t\t});\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\treturn (\r\n\t\t\t<div className=\"landing\">\r\n\t\t\t\t<div className=\"header\">\r\n\t\t\t\t\t<div className=\"overview\">\r\n\t\t\t\t\t\tGenerate a random number of cards (between 5 and 40) and\r\n\t\t\t\t\t\tdetermine the highest scoring hand (Royal Flush,\r\n\t\t\t\t\t\tStraight, Pair, etc.){' '}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"result\">Best hand: {this.state.result}</div>\r\n\t\t\t\t\t<div className=\"button\">\r\n\t\t\t\t\t\t<button onClick={() => draw_cards()}>Draw Hand</button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"cards\">{this.state.card_div}</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Landing;\r\n","// Importing Depenencies\nimport React from 'react';\nimport Landing from './pages/Landing';\n\n// Importing Styling\nimport './App.css';\n\nfunction App() {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<Landing />\n\t\t</div>\n\t);\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}